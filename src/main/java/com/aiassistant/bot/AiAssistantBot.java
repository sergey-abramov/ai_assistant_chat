package com.aiassistant.bot;

import com.aiassistant.config.ApplicationProperties;
import com.aiassistant.exception.AiServiceException;
import com.aiassistant.exception.RateLimitExceededException;
import com.aiassistant.model.TelegramUser;
import com.aiassistant.service.AiService;
import com.aiassistant.service.RateLimitService;
import com.aiassistant.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

/**
 * Main Telegram bot class.
 * Follows Single Responsibility Principle - handles only Telegram bot logic.
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class AiAssistantBot extends TelegramLongPollingBot {
    
    private final ApplicationProperties properties;
    private final AiService aiService;
    private final UserService userService;
    private final RateLimitService rateLimitService;
    
    @Override
    public String getBotUsername() {
        return properties.telegramBotUsername();
    }
    
    @Override
    public String getBotToken() {
        return properties.telegramBotToken();
    }
    
    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) {
            return;
        }
        
        Message message = update.getMessage();
        Long userId = message.getFrom().getId();
        String messageText = message.getText();
        
        try {
            // Get or create user
            TelegramUser user = userService.getOrCreateUser(message.getFrom());
            
            // Check if user is blocked
            if (userService.isUserBlocked(userId)) {
                log.warn("Blocked user {} tried to send message", userId);
                return;
            }
            
            // Update user message count
            userService.updateUser(user.incrementMessageCount());
            
            // Handle commands
            if (messageText.startsWith("/")) {
                handleCommand(message, messageText);
                return;
            }
            
            // Check rate limit
            try {
                rateLimitService.recordRequest(userId);
            } catch (RateLimitExceededException e) {
                sendMessage(message.getChatId(), 
                    "‚è∞ –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ " + 
                    rateLimitService.getTimeUntilReset(userId) + " —Å–µ–∫—É–Ω–¥.");
                return;
            }
            
            // Validate message length
            if (messageText.length() > properties.botBehavior().maxMessageLength()) {
                sendMessage(message.getChatId(), 
                    "üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: " + 
                    properties.botBehavior().maxMessageLength() + " —Å–∏–º–≤–æ–ª–æ–≤.");
                return;
            }
            
            // Send typing indicator and process AI request
            sendTypingAction(message.getChatId());
            processAiRequest(message, messageText);
            
        } catch (Exception e) {
            log.error("Error processing message from user {}: {}", userId, e.getMessage(), e);
            sendMessage(message.getChatId(), properties.botBehavior().defaultErrorMessage());
        }
    }
    
    private void handleCommand(Message message, String command) {
        Long chatId = message.getChatId();
        
        switch (command.toLowerCase()) {
            case "/start" -> {
                sendMessage(chatId, properties.botBehavior().welcomeMessage());
                log.info("User {} started the bot", message.getFrom().getId());
            }
            case "/help" -> {
                sendMessage(chatId, properties.botBehavior().helpMessage());
            }
            case "/status" -> {
                handleStatusCommand(message);
            }
            default -> {
                sendMessage(chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.");
            }
        }
    }
    
    private void handleStatusCommand(Message message) {
        Long userId = message.getFrom().getId();
        Long chatId = message.getChatId();
        
        TelegramUser user = userService.findUser(userId).orElse(null);
        if (user == null) {
            sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }
        
        int remainingRequests = rateLimitService.getRemainingRequests(userId);
        long timeUntilReset = rateLimitService.getTimeUntilReset(userId);
        boolean aiAvailable = aiService.isAvailable();
        
        String status = String.format("""
            üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            
            üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s
            üìù –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d
            ‚è±Ô∏è –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤: %d
            üîÑ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ —á–µ—Ä–µ–∑: %d —Å–µ–∫
            ü§ñ AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä: %s
            ‚úÖ AI –î–æ—Å—Ç—É–ø–µ–Ω: %s
            """,
            user.getDisplayName(),
            user.getMessageCount(),
            remainingRequests,
            timeUntilReset,
            aiService.getProviderName(),
            aiAvailable ? "–î–∞" : "–ù–µ—Ç"
        );
        
        sendMessage(chatId, status);
    }
    
    private void processAiRequest(Message message, String messageText) {
        Long chatId = message.getChatId();
        
        aiService.generateResponse(messageText)
            .thenAccept(response -> {
                sendMessage(chatId, response);
                log.debug("Sent AI response to user {}", message.getFrom().getId());
            })
            .exceptionally(throwable -> {
                log.error("Error generating AI response", throwable);
                
                String errorMessage;
                if (throwable.getCause() instanceof AiServiceException aiException) {
                    errorMessage = "ü§ñ AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: " + aiException.getMessage();
                } else {
                    errorMessage = properties.botBehavior().defaultErrorMessage();
                }
                
                sendMessage(chatId, errorMessage);
                return null;
            });
    }
    
    private void sendMessage(Long chatId, String text) {
        try {
            SendMessage message = SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(text)
                    .build();
            
            execute(message);
        } catch (TelegramApiException e) {
            log.error("Error sending message to chat {}: {}", chatId, e.getMessage(), e);
        }
    }
    
    private void sendTypingAction(Long chatId) {
        try {
            org.telegram.telegrambots.meta.api.methods.send.SendChatAction chatAction = 
                org.telegram.telegrambots.meta.api.methods.send.SendChatAction.builder()
                    .chatId(chatId.toString())
                    .action("typing")
                    .build();
            execute(chatAction);
        } catch (TelegramApiException e) {
            log.debug("Error sending typing action to chat {}: {}", chatId, e.getMessage());
        }
    }
}
